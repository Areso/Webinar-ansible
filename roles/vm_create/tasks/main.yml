---

# print names
- debug:
    msg: "{{ inventory_hostname }}"

# get the local username under which the playbook is running
- name: get_the_username
  become: False
  local_action: command whoami
  register: local_username
  delegate_to: localhost

# delete records from the user's known_hosts
- name: delete_records_from_know_hosts
  shell: "ssh-keygen -f '/home/{{ local_username.stdout }}/.ssh/known_hosts' -R {{ inventory_hostname }}"
  delegate_to: localhost
  ignore_errors: True

# delete records from the user's known_hosts
- name: delete_records_from_know_hosts_no_path
  shell: "ssh-keygen -R {{ inventory_hostname }}"
  delegate_to: localhost
  ignore_errors: True

# list all available regions and check APIs health
- name: get_keys
  uri:
    url: "https://api.digitalocean.com/v2/account/keys"
    method: GET
    headers:
      "Authorization": "Bearer {{ do_token }}"
    force_basic_auth: yes
    body_format: json
    status_code: 200
  register: account
  changed_when: 200
  delegate_to: localhost
  run_once: True
  tags:
    - check_api_health

# create vms
- name: vm_create
  uri:
    url: https://api.digitalocean.com/v2/droplets
    method: POST
    headers:
      "Authorization": "Bearer {{ do_token }}"
    force_basic_auth: yes
    body:
      name: "{{ inventory_hostname }}"
      region: "{{ region_slug }}"
      size: "{{ size }}"
      image: "{{ image }}"
      backups: false
      tags: ["{{ vm_tag }}"]
      ssh_keys: "{{ account.json.ssh_keys[0].id }}"
    body_format: json
    status_code: 202
  register: vm_create_result
  changed_when: 202
  delegate_to: localhost

# print droplets IDs
- debug:
    msg: "{{ vm_create_result.json.droplet.id }}"

- pause:
    seconds: 40

# get droplets IPs
- name: vm_get_ip
  uri:
    url: "https://api.digitalocean.com/v2/droplets/{{ vm_create_result.json.droplet.id }}"
    method: GET
    headers:
      "Authorization": "Bearer {{ do_token }}"
    force_basic_auth: yes
    body_format: json
    status_code: 200
  register: vm_get_it
  changed_when: 200
  delegate_to: localhost

- name: breakpoint1
  shell: "echo breakpoint1"
  delegate_to: localhost

# print all the params of the newly created VM
- name: print params of # print network
  debug:
    msg: "{{ vm_get_it.json }}"

# print network
- debug:
    msg: "{{ vm_get_it.json.droplet.networks.v4 }}"

# print IP
- debug:
    msg: "{{ vm_get_it.json.droplet.networks.v4[0].ip_address }}"

- name: add_host_to_hosts
  shell: "echo '{{ vm_get_it.json.droplet.networks.v4[0].ip_address }} {{ inventory_hostname }} # {{ vm_tag }}' >> /etc/hosts"
  become: yes
  delegate_to: localhost

- pause:
    seconds: 3

- name: add_host_to_known_hosts
  shell: "ssh-keyscan -t rsa {{ inventory_hostname }} >> ~/.ssh/known_hosts -v"
  delegate_to: localhost
  register: add_host

- name: add_host_to_known_hosts_rc
  shell: "echo $?"
  delegate_to: localhost
  register: add_host_rc

- name: show_result_of_adding_host
  debug:
    msg: 
      - "{{ add_host }}"
      - "{{ add_host_rc }}"
